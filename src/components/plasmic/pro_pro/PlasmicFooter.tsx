// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: qtWvXH8Uhh67sc1TY2MZeK
// Component: VCHHWoBay_QI

import * as React from "react";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Logo from "../../Logo"; // plasmic-import: RkBFuHrIeu0V/component
import NewsletterForm from "../../NewsletterForm"; // plasmic-import: lXUbYH3ce55y/component
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import { useScreenVariants as useScreenVariantsd5V9Y7YjWcfm } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: D5V9y7YjWCFM/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic_plasmic_rich_components.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic_pro_pro.module.css"; // plasmic-import: qtWvXH8Uhh67sc1TY2MZeK/projectcss
import sty from "./PlasmicFooter.module.css"; // plasmic-import: VCHHWoBay_QI/css

import Line2Icon from "./icons/PlasmicIcon__Line2"; // plasmic-import: BYWlSKDxNWZe/icon
import IconsClose2Icon from "./icons/PlasmicIcon__IconsClose2"; // plasmic-import: 1lcJ7Ln8CPUL/icon

createPlasmicElementProxy;

export type PlasmicFooter__VariantMembers = {
  product: "hubHub" | "mapMap" | "proPro" | "stampStamp" | "shortStop";
};
export type PlasmicFooter__VariantsArgs = {
  product?: MultiChoiceArg<
    "hubHub" | "mapMap" | "proPro" | "stampStamp" | "shortStop"
  >;
};
type VariantPropType = keyof PlasmicFooter__VariantsArgs;
export const PlasmicFooter__VariantProps = new Array<VariantPropType>(
  "product"
);

export type PlasmicFooter__ArgsType = {
  onclick?: (event: any) => void;
};
type ArgPropType = keyof PlasmicFooter__ArgsType;
export const PlasmicFooter__ArgProps = new Array<ArgPropType>("onclick");

export type PlasmicFooter__OverridesType = {
  root?: p.Flex<"div">;
  lpFooter?: p.Flex<"div">;
  logo?: p.Flex<typeof Logo>;
  links?: p.Flex<"div">;
  newsletterForm?: p.Flex<typeof NewsletterForm>;
  bottom?: p.Flex<"div">;
  legal?: p.Flex<"div">;
  cookieConsentNotice?: p.Flex<"div">;
};

export interface DefaultFooterProps {
  onclick?: (event: any) => void;
  product?: MultiChoiceArg<
    "hubHub" | "mapMap" | "proPro" | "stampStamp" | "shortStop"
  >;
  className?: string;
}

const $$ = {};

function PlasmicFooter__RenderFunc(props: {
  variants: PlasmicFooter__VariantsArgs;
  args: PlasmicFooter__ArgsType;
  overrides: PlasmicFooter__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof p.useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "product",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.product
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = p.useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsd5V9Y7YjWcfm()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root,
        {
          [sty.rootproduct_hubHub]: hasVariant($state, "product", "hubHub"),
          [sty.rootproduct_mapMap]: hasVariant($state, "product", "mapMap"),
          [sty.rootproduct_proPro]: hasVariant($state, "product", "proPro"),
          [sty.rootproduct_shortStop]: hasVariant(
            $state,
            "product",
            "shortStop"
          ),
          [sty.rootproduct_stampStamp]: hasVariant(
            $state,
            "product",
            "stampStamp"
          )
        }
      )}
    >
      <p.Stack
        as={"div"}
        data-plasmic-name={"lpFooter"}
        data-plasmic-override={overrides.lpFooter}
        hasGap={true}
        className={classNames(projectcss.all, sty.lpFooter, {
          [sty.lpFooterproduct_hubHub]: hasVariant($state, "product", "hubHub"),
          [sty.lpFooterproduct_mapMap]: hasVariant($state, "product", "mapMap")
        })}
      >
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__z7PGf)}
        >
          <Logo
            data-plasmic-name={"logo"}
            data-plasmic-override={overrides.logo}
            app={
              hasVariant($state, "product", "proPro")
                ? "proPro"
                : hasVariant($state, "product", "mapMap")
                ? "mapMap"
                : hasVariant($state, "product", "hubHub")
                ? "hubHub"
                : undefined
            }
            className={classNames("__wab_instance", sty.logo, {
              [sty.logoproduct_hubHub]: hasVariant($state, "product", "hubHub"),
              [sty.logoproduct_mapMap]: hasVariant($state, "product", "mapMap"),
              [sty.logoproduct_proPro]: hasVariant($state, "product", "proPro")
            })}
            size={hasVariant($state, "product", "hubHub") ? "large" : "large"}
          />

          <div
            className={classNames(projectcss.all, sty.freeBox__s23Bk, {
              [sty.freeBoxproduct_mapMap__s23Bk53J6D]: hasVariant(
                $state,
                "product",
                "mapMap"
              )
            })}
          >
            <div
              data-plasmic-name={"links"}
              data-plasmic-override={overrides.links}
              className={classNames(projectcss.all, sty.links)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__j9Lu4
                )}
              >
                <React.Fragment>
                  <React.Fragment>{"Company\n"}</React.Fragment>
                  <span
                    className={"plasmic_default__all plasmic_default__span"}
                    style={{ color: "#FDFBF7" }}
                  >
                    {"About"}
                  </span>
                  <React.Fragment>{"\n"}</React.Fragment>
                  <span
                    className={"plasmic_default__all plasmic_default__span"}
                    style={{ color: "#FDFBF7" }}
                  >
                    {"Youtube Channel"}
                  </span>
                  <React.Fragment>{"\n"}</React.Fragment>
                  <span
                    className={"plasmic_default__all plasmic_default__span"}
                    style={{ color: "#FDFBF7" }}
                  >
                    {"Twitter"}
                  </span>
                  <React.Fragment>{"\n"}</React.Fragment>
                  <span
                    className={"plasmic_default__all plasmic_default__span"}
                    style={{ color: "#FDFBF7" }}
                  >
                    {"Blog"}
                  </span>
                  <React.Fragment>{"\n"}</React.Fragment>
                  <span
                    className={"plasmic_default__all plasmic_default__span"}
                    style={{ color: "#FDFBF7" }}
                  >
                    {"Join"}
                  </span>
                </React.Fragment>
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__sr0Ep
                )}
              >
                <React.Fragment>
                  <React.Fragment>{"Help\n"}</React.Fragment>
                  <span
                    className={"plasmic_default__all plasmic_default__span"}
                    style={{ color: "#FDFBF7" }}
                  >
                    {"Contact support"}
                  </span>
                  <React.Fragment>{"\n"}</React.Fragment>
                  <span
                    className={"plasmic_default__all plasmic_default__span"}
                    style={{ color: "#FDFBF7" }}
                  >
                    {"Guides & Ressources"}
                  </span>
                  <React.Fragment>{"\n"}</React.Fragment>
                  <span
                    className={"plasmic_default__all plasmic_default__span"}
                    style={{ color: "#FDFBF7" }}
                  >
                    {"HubHub for "}
                  </span>
                  <React.Fragment>{"\n"}</React.Fragment>
                  <span
                    className={"plasmic_default__all plasmic_default__span"}
                    style={{ color: "#FDFBF7" }}
                  >
                    {"Content Creators"}
                  </span>
                </React.Fragment>
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__zI3Xh
                )}
              >
                <React.Fragment>
                  <React.Fragment>{"Product\n"}</React.Fragment>
                  {
                    <a
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        projectcss.__wab_text,
                        projectcss.plasmic_default__inline,
                        sty.link__lFlMz
                      )}
                      href={"updt.com"}
                    >
                      <React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ color: "#FDFBF7" }}
                        >
                          {"Updates"}
                        </span>
                      </React.Fragment>
                    </a>
                  }
                  <React.Fragment>{"\n"}</React.Fragment>
                  {
                    <a
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        projectcss.__wab_text,
                        projectcss.plasmic_default__inline,
                        sty.link__hgVzR
                      )}
                      href={"comm.com"}
                    >
                      <React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ color: "#FDFBF7" }}
                        >
                          {"Discord community"}
                        </span>
                      </React.Fragment>
                    </a>
                  }
                  <React.Fragment>{"\n"}</React.Fragment>
                  {
                    <a
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        projectcss.__wab_text,
                        projectcss.plasmic_default__inline,
                        sty.link__q8GVn
                      )}
                      href={"comm.com"}
                    >
                      <React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ color: "#FDFBF7" }}
                        >
                          {"Chrome extension"}
                        </span>
                      </React.Fragment>
                    </a>
                  }
                  <React.Fragment>{"\n"}</React.Fragment>
                  <span
                    className={"plasmic_default__all plasmic_default__span"}
                    style={{ color: "#FDFBF7" }}
                  >
                    {"iOS app"}
                  </span>
                  <React.Fragment>{"\n"}</React.Fragment>
                  <span
                    className={"plasmic_default__all plasmic_default__span"}
                    style={{ color: "#FDFBF7" }}
                  >
                    {"Android app"}
                  </span>
                  <React.Fragment>{"\n"}</React.Fragment>
                  <span
                    className={"plasmic_default__all plasmic_default__span"}
                    style={{ color: "#FDFBF7" }}
                  >
                    {"Mac app"}
                  </span>
                  <React.Fragment>{"\n"}</React.Fragment>
                  <span
                    className={"plasmic_default__all plasmic_default__span"}
                    style={{ color: "#FDFBF7" }}
                  >
                    {"Windows app"}
                  </span>
                  <React.Fragment>{"\n\n"}</React.Fragment>
                  <span
                    className={"plasmic_default__all plasmic_default__span"}
                    style={{ color: "#FDFBF7" }}
                  >
                    {""}
                  </span>
                </React.Fragment>
              </div>
            </div>
            <NewsletterForm
              data-plasmic-name={"newsletterForm"}
              data-plasmic-override={overrides.newsletterForm}
              className={classNames("__wab_instance", sty.newsletterForm)}
            />
          </div>
        </p.Stack>
        <p.Stack
          as={"div"}
          data-plasmic-name={"bottom"}
          data-plasmic-override={overrides.bottom}
          hasGap={true}
          className={classNames(projectcss.all, sty.bottom)}
        >
          <div className={classNames(projectcss.all, sty.freeBox__psNck)}>
            <Line2Icon
              className={classNames(projectcss.all, sty.svg__t5G3Y)}
              role={"img"}
            />
          </div>
          <p.Stack
            as={"div"}
            data-plasmic-name={"legal"}
            data-plasmic-override={overrides.legal}
            hasGap={true}
            className={classNames(projectcss.all, sty.legal)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___2Es6
              )}
            >
              {"\u00a9 2021 ProPro Productions. All rights reserved."}
            </div>
            <p.Stack
              as={"div"}
              data-plasmic-name={"cookieConsentNotice"}
              data-plasmic-override={overrides.cookieConsentNotice}
              hasGap={true}
              className={classNames(projectcss.all, sty.cookieConsentNotice)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__mc9Dc
                )}
              >
                {"By using this website you agree to our cookie policy"}
              </div>
              <IconsClose2Icon
                className={classNames(projectcss.all, sty.svg__g9Jcb)}
                role={"img"}
              />
            </p.Stack>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__owUst
              )}
            >
              {"Terms and Conditions \u00b7 Privacy Policy"}
            </div>
          </p.Stack>
        </p.Stack>
        <div className={classNames(projectcss.all, sty.freeBox__aRr9M)} />
      </p.Stack>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "lpFooter",
    "logo",
    "links",
    "newsletterForm",
    "bottom",
    "legal",
    "cookieConsentNotice"
  ],
  lpFooter: [
    "lpFooter",
    "logo",
    "links",
    "newsletterForm",
    "bottom",
    "legal",
    "cookieConsentNotice"
  ],
  logo: ["logo"],
  links: ["links"],
  newsletterForm: ["newsletterForm"],
  bottom: ["bottom", "legal", "cookieConsentNotice"],
  legal: ["legal", "cookieConsentNotice"],
  cookieConsentNotice: ["cookieConsentNotice"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  lpFooter: "div";
  logo: typeof Logo;
  links: "div";
  newsletterForm: typeof NewsletterForm;
  bottom: "div";
  legal: "div";
  cookieConsentNotice: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicFooter__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicFooter__VariantsArgs;
    args?: PlasmicFooter__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicFooter__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicFooter__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicFooter__ArgProps,
          internalVariantPropNames: PlasmicFooter__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicFooter__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicFooter";
  } else {
    func.displayName = `PlasmicFooter.${nodeName}`;
  }
  return func;
}

export const PlasmicFooter = Object.assign(
  // Top-level PlasmicFooter renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    lpFooter: makeNodeComponent("lpFooter"),
    logo: makeNodeComponent("logo"),
    links: makeNodeComponent("links"),
    newsletterForm: makeNodeComponent("newsletterForm"),
    bottom: makeNodeComponent("bottom"),
    legal: makeNodeComponent("legal"),
    cookieConsentNotice: makeNodeComponent("cookieConsentNotice"),

    // Metadata about props expected for PlasmicFooter
    internalVariantProps: PlasmicFooter__VariantProps,
    internalArgProps: PlasmicFooter__ArgProps
  }
);

export default PlasmicFooter;
/* prettier-ignore-end */
