// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: qtWvXH8Uhh67sc1TY2MZeK
// Component: lXUbYH3ce55y

import * as React from "react";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { AntdInput } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdInput_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";

import { ThemeValue, useTheme } from "./PlasmicGlobalVariant__Theme"; // plasmic-import: ROqE-xVeeGeS/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic_plasmic_rich_components.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic_pro_pro.module.css"; // plasmic-import: qtWvXH8Uhh67sc1TY2MZeK/projectcss
import sty from "./PlasmicNewsletterForm.module.css"; // plasmic-import: lXUbYH3ce55y/css

createPlasmicElementProxy;

export type PlasmicNewsletterForm__VariantMembers = {
  stage: "beforeSubmit" | "afterSubmit" | "failedSubmit";
};
export type PlasmicNewsletterForm__VariantsArgs = {
  stage?: SingleChoiceArg<"beforeSubmit" | "afterSubmit" | "failedSubmit">;
};
type VariantPropType = keyof PlasmicNewsletterForm__VariantsArgs;
export const PlasmicNewsletterForm__VariantProps = new Array<VariantPropType>(
  "stage"
);

export type PlasmicNewsletterForm__ArgsType = {
  value?: string;
  sendNewsLetter?: (event: any) => void;
};
type ArgPropType = keyof PlasmicNewsletterForm__ArgsType;
export const PlasmicNewsletterForm__ArgProps = new Array<ArgPropType>(
  "value",
  "sendNewsLetter"
);

export type PlasmicNewsletterForm__OverridesType = {
  container?: p.Flex<"div">;
  newsletterForm?: p.Flex<"form">;
  emailInput?: p.Flex<typeof AntdInput>;
  submitButton?: p.Flex<"button">;
  submitMessageContainer?: p.Flex<"div">;
  submitMessage?: p.Flex<"div">;
  button?: p.Flex<typeof AntdButton>;
};

export interface DefaultNewsletterFormProps {
  value?: string;
  sendNewsLetter?: (event: any) => void;
  stage?: SingleChoiceArg<"beforeSubmit" | "afterSubmit" | "failedSubmit">;
  className?: string;
}

const $$ = {};

function PlasmicNewsletterForm__RenderFunc(props: {
  variants: PlasmicNewsletterForm__VariantsArgs;
  args: PlasmicNewsletterForm__ArgsType;
  overrides: PlasmicNewsletterForm__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          value: (() => {
            try {
              return undefined;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
        },
        props.args
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof p.useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "stage",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.stage
      },
      {
        path: "emailInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props["value"],

        onMutate: p.generateOnMutateForSpec("value", AntdInput_Helpers)
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = p.useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    theme: useTheme()
  });

  return (
    <div
      data-plasmic-name={"container"}
      data-plasmic-override={overrides.container}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.container,
        {
          [projectcss.global_theme_dark]: hasVariant(
            globalVariants,
            "theme",
            "dark"
          ),
          [sty.containerstage_afterSubmit]: hasVariant(
            $state,
            "stage",
            "afterSubmit"
          ),
          [sty.containerstage_beforeSubmit]: hasVariant(
            $state,
            "stage",
            "beforeSubmit"
          ),
          [sty.containerstage_failedSubmit]: hasVariant(
            $state,
            "stage",
            "failedSubmit"
          )
        }
      )}
    >
      <div
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.text__pShu4,
          {
            [sty.textstage_failedSubmit__pShu4A0Cnl]: hasVariant(
              $state,
              "stage",
              "failedSubmit"
            )
          }
        )}
      >
        {"Please check if you're online and try again\ud83d\ude4f"}
      </div>
      <p.Stack
        as={"form"}
        data-plasmic-name={"newsletterForm"}
        data-plasmic-override={overrides.newsletterForm}
        hasGap={true}
        className={classNames(projectcss.all, sty.newsletterForm, {
          [sty.newsletterFormstage_afterSubmit]: hasVariant(
            $state,
            "stage",
            "afterSubmit"
          )
        })}
        id={"newsletter-form"}
      >
        {(() => {
          const child$Props = {
            className: classNames("__wab_instance", sty.emailInput),
            onChange: p.generateStateOnChangePropForCodeComponents(
              $state,
              "value",
              ["emailInput", "value"],
              AntdInput_Helpers
            ),
            placeholder: "abc@xyz.com",
            type: "email",
            value: p.generateStateValueProp($state, ["emailInput", "value"])
          };
          p.initializeCodeComponentStates(
            $state,
            [
              {
                name: "value",
                plasmicStateName: "emailInput.value"
              }
            ],
            [],
            AntdInput_Helpers ?? {},
            child$Props
          );

          return (
            <AntdInput
              data-plasmic-name={"emailInput"}
              data-plasmic-override={overrides.emailInput}
              {...child$Props}
            />
          );
        })()}
        <button
          data-plasmic-name={"submitButton"}
          data-plasmic-override={overrides.submitButton}
          className={classNames(
            projectcss.all,
            projectcss.button,
            sty.submitButton
          )}
          onClick={args.sendNewsLetter}
          ref={ref => {
            $refs["submitButton"] = ref;
          }}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__jI6Cc
            )}
            id={``}
          >
            {"\ud83d\udce8  Newsletter"}
          </div>
        </button>
      </p.Stack>
      <div
        data-plasmic-name={"submitMessageContainer"}
        data-plasmic-override={overrides.submitMessageContainer}
        className={classNames(projectcss.all, sty.submitMessageContainer, {
          [sty.submitMessageContainerstage_afterSubmit]: hasVariant(
            $state,
            "stage",
            "afterSubmit"
          )
        })}
      >
        <div
          data-plasmic-name={"submitMessage"}
          data-plasmic-override={overrides.submitMessage}
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.submitMessage,
            {
              [sty.submitMessagestage_afterSubmit]: hasVariant(
                $state,
                "stage",
                "afterSubmit"
              )
            }
          )}
        >
          {
            "Thank you \ud83e\udd73  We sent you an email with a confirmation button \ud83d\udcec"
          }
        </div>
        <AntdButton
          data-plasmic-name={"button"}
          data-plasmic-override={overrides.button}
          className={classNames("__wab_instance", sty.button, {
            [sty.buttonstage_afterSubmit]: hasVariant(
              $state,
              "stage",
              "afterSubmit"
            )
          })}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__taovo
            )}
          >
            {"Button"}
          </div>
        </AntdButton>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  container: [
    "container",
    "newsletterForm",
    "emailInput",
    "submitButton",
    "submitMessageContainer",
    "submitMessage",
    "button"
  ],
  newsletterForm: ["newsletterForm", "emailInput", "submitButton"],
  emailInput: ["emailInput"],
  submitButton: ["submitButton"],
  submitMessageContainer: ["submitMessageContainer", "submitMessage", "button"],
  submitMessage: ["submitMessage"],
  button: ["button"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  container: "div";
  newsletterForm: "form";
  emailInput: typeof AntdInput;
  submitButton: "button";
  submitMessageContainer: "div";
  submitMessage: "div";
  button: typeof AntdButton;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicNewsletterForm__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicNewsletterForm__VariantsArgs;
    args?: PlasmicNewsletterForm__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicNewsletterForm__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicNewsletterForm__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicNewsletterForm__ArgProps,
          internalVariantPropNames: PlasmicNewsletterForm__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicNewsletterForm__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "container") {
    func.displayName = "PlasmicNewsletterForm";
  } else {
    func.displayName = `PlasmicNewsletterForm.${nodeName}`;
  }
  return func;
}

export const PlasmicNewsletterForm = Object.assign(
  // Top-level PlasmicNewsletterForm renders the root element
  makeNodeComponent("container"),
  {
    // Helper components rendering sub-elements
    newsletterForm: makeNodeComponent("newsletterForm"),
    emailInput: makeNodeComponent("emailInput"),
    submitButton: makeNodeComponent("submitButton"),
    submitMessageContainer: makeNodeComponent("submitMessageContainer"),
    submitMessage: makeNodeComponent("submitMessage"),
    button: makeNodeComponent("button"),

    // Metadata about props expected for PlasmicNewsletterForm
    internalVariantProps: PlasmicNewsletterForm__VariantProps,
    internalArgProps: PlasmicNewsletterForm__ArgProps
  }
);

export default PlasmicNewsletterForm;
/* prettier-ignore-end */
