// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: qtWvXH8Uhh67sc1TY2MZeK
// Component: 0t-YrwACA_3A

import * as React from "react";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic_plasmic_rich_components.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic_pro_pro.module.css"; // plasmic-import: qtWvXH8Uhh67sc1TY2MZeK/projectcss
import sty from "./PlasmicNewsletterConfirmation.module.css"; // plasmic-import: 0t-YrwACA_3A/css

createPlasmicElementProxy;

export type PlasmicNewsletterConfirmation__VariantMembers = {};
export type PlasmicNewsletterConfirmation__VariantsArgs = {};
type VariantPropType = keyof PlasmicNewsletterConfirmation__VariantsArgs;
export const PlasmicNewsletterConfirmation__VariantProps =
  new Array<VariantPropType>();

export type PlasmicNewsletterConfirmation__ArgsType = {
  message?: string;
  onClick?: () => void;
};
type ArgPropType = keyof PlasmicNewsletterConfirmation__ArgsType;
export const PlasmicNewsletterConfirmation__ArgProps = new Array<ArgPropType>(
  "message",
  "onClick"
);

export type PlasmicNewsletterConfirmation__OverridesType = {
  root?: p.Flex<"div">;
  freeBox?: p.Flex<"div">;
};

export interface DefaultNewsletterConfirmationProps {
  message?: string;
  onClick?: () => void;
  className?: string;
}

const $$ = {};

function PlasmicNewsletterConfirmation__RenderFunc(props: {
  variants: PlasmicNewsletterConfirmation__VariantsArgs;
  args: PlasmicNewsletterConfirmation__ArgsType;
  overrides: PlasmicNewsletterConfirmation__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          message: "default message - not to be shown to users"
        },
        props.args
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
    >
      <div
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        className={classNames(projectcss.all, sty.freeBox)}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text___8ODbt
          )}
        >
          <React.Fragment>
            <span
              className={"plasmic_default__all plasmic_default__span"}
              style={{ fontWeight: 700 }}
            >
              {"Congratulation \ud83e\udd73"}
            </span>
            <React.Fragment>{"\n"}</React.Fragment>
          </React.Fragment>
        </div>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__kkKRk
          )}
        >
          <React.Fragment>
            <span
              className={"plasmic_default__all plasmic_default__span"}
              style={{ fontWeight: 700 }}
            >
              {"You are now signed up to our newsletter"}
            </span>
            <React.Fragment>{"\n"}</React.Fragment>
          </React.Fragment>
        </div>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__opFnD
          )}
        >
          {
            "Whenever we have important updates or tipps about HubHub, MapMap, SortStop, StreamBreak or ProPro productions in general - we will send you concise emails that will homefuly make your life better\n\nHave a nice day!"
          }
        </div>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "freeBox"],
  freeBox: ["freeBox"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  freeBox: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicNewsletterConfirmation__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicNewsletterConfirmation__VariantsArgs;
    args?: PlasmicNewsletterConfirmation__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicNewsletterConfirmation__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicNewsletterConfirmation__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicNewsletterConfirmation__ArgProps,
          internalVariantPropNames: PlasmicNewsletterConfirmation__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicNewsletterConfirmation__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicNewsletterConfirmation";
  } else {
    func.displayName = `PlasmicNewsletterConfirmation.${nodeName}`;
  }
  return func;
}

export const PlasmicNewsletterConfirmation = Object.assign(
  // Top-level PlasmicNewsletterConfirmation renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),

    // Metadata about props expected for PlasmicNewsletterConfirmation
    internalVariantProps: PlasmicNewsletterConfirmation__VariantProps,
    internalArgProps: PlasmicNewsletterConfirmation__ArgProps
  }
);

export default PlasmicNewsletterConfirmation;
/* prettier-ignore-end */
