"use strict";
// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PlasmicNewsletterForm = exports.PlasmicNewsletterForm__ArgProps = exports.PlasmicNewsletterForm__VariantProps = void 0;
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: qtWvXH8Uhh67sc1TY2MZeK
// Component: lXUbYH3ce55y
const React = __importStar(require("react"));
const p = __importStar(require("@plasmicapp/react-web"));
const ph = __importStar(require("@plasmicapp/react-web/lib/host"));
const react_web_1 = require("@plasmicapp/react-web");
const registerInput_1 = require("@plasmicpkgs/antd5/skinny/registerInput");
const registerInput_2 = require("@plasmicpkgs/antd5/skinny/registerInput");
const registerButton_1 = require("@plasmicpkgs/antd5/skinny/registerButton");
const PlasmicGlobalVariant__Theme_1 = require("./PlasmicGlobalVariant__Theme"); // plasmic-import: ROqE-xVeeGeS/globalVariant
require("@plasmicapp/react-web/lib/plasmic.css");
const plasmic_antd_5_hostless_module_css_1 = __importDefault(require("../antd_5_hostless/plasmic_antd_5_hostless.module.css")); // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
const plasmic_plasmic_rich_components_module_css_1 = __importDefault(require("../plasmic_rich_components/plasmic_plasmic_rich_components.module.css")); // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
const plasmic_pro_pro_module_css_1 = __importDefault(require("./plasmic_pro_pro.module.css")); // plasmic-import: qtWvXH8Uhh67sc1TY2MZeK/projectcss
const PlasmicNewsletterForm_module_css_1 = __importDefault(require("./PlasmicNewsletterForm.module.css")); // plasmic-import: lXUbYH3ce55y/css
react_web_1.createPlasmicElementProxy;
exports.PlasmicNewsletterForm__VariantProps = new Array("stage");
exports.PlasmicNewsletterForm__ArgProps = new Array("value", "sendNewsLetter");
const $$ = {};
function PlasmicNewsletterForm__RenderFunc(props) {
    var _a, _b;
    const { variants, overrides, forNode } = props;
    const args = React.useMemo(() => Object.assign({
        value: (() => {
            try {
                return undefined;
            }
            catch (e) {
                if (e instanceof TypeError ||
                    (e === null || e === void 0 ? void 0 : e.plasmicType) === "PlasmicUndefinedDataError") {
                    return undefined;
                }
                throw e;
            }
        })()
    }, props.args), [props.args]);
    const $props = Object.assign(Object.assign({}, args), variants);
    const $ctx = ((_a = ph.useDataEnv) === null || _a === void 0 ? void 0 : _a.call(ph)) || {};
    const refsRef = React.useRef({});
    const $refs = refsRef.current;
    const currentUser = ((_b = p.useCurrentUser) === null || _b === void 0 ? void 0 : _b.call(p)) || {};
    const stateSpecs = React.useMemo(() => [
        {
            path: "stage",
            type: "private",
            variableType: "variant",
            initFunc: ({ $props, $state, $queries, $ctx }) => $props.stage
        },
        {
            path: "emailInput.value",
            type: "private",
            variableType: "text",
            initFunc: ({ $props, $state, $queries, $ctx }) => $props["value"],
            onMutate: p.generateOnMutateForSpec("value", registerInput_2.inputHelpers)
        }
    ], [$props, $ctx, $refs]);
    const $state = p.useDollarState(stateSpecs, {
        $props,
        $ctx,
        $queries: {},
        $refs
    });
    const globalVariants = (0, react_web_1.ensureGlobalVariants)({
        theme: (0, PlasmicGlobalVariant__Theme_1.useTheme)()
    });
    return ((0, react_web_1.createPlasmicElementProxy)("div", { "data-plasmic-name": "container", "data-plasmic-override": overrides.container, "data-plasmic-root": true, "data-plasmic-for-node": forNode, className: (0, react_web_1.classNames)(plasmic_pro_pro_module_css_1.default.all, plasmic_pro_pro_module_css_1.default.root_reset, plasmic_pro_pro_module_css_1.default.plasmic_default_styles, plasmic_pro_pro_module_css_1.default.plasmic_mixins, plasmic_pro_pro_module_css_1.default.plasmic_tokens, plasmic_antd_5_hostless_module_css_1.default.plasmic_tokens, plasmic_plasmic_rich_components_module_css_1.default.plasmic_tokens, PlasmicNewsletterForm_module_css_1.default.container, {
            [plasmic_pro_pro_module_css_1.default.global_theme_dark]: (0, react_web_1.hasVariant)(globalVariants, "theme", "dark"),
            [PlasmicNewsletterForm_module_css_1.default.containerstage_afterSubmit]: (0, react_web_1.hasVariant)($state, "stage", "afterSubmit"),
            [PlasmicNewsletterForm_module_css_1.default.containerstage_beforeSubmit]: (0, react_web_1.hasVariant)($state, "stage", "beforeSubmit"),
            [PlasmicNewsletterForm_module_css_1.default.containerstage_failedSubmit]: (0, react_web_1.hasVariant)($state, "stage", "failedSubmit")
        }) },
        (0, react_web_1.createPlasmicElementProxy)("div", { className: (0, react_web_1.classNames)(plasmic_pro_pro_module_css_1.default.all, plasmic_pro_pro_module_css_1.default.__wab_text, PlasmicNewsletterForm_module_css_1.default.text__pShu4, {
                [PlasmicNewsletterForm_module_css_1.default.textstage_failedSubmit__pShu4A0Cnl]: (0, react_web_1.hasVariant)($state, "stage", "failedSubmit")
            }) }, "Please check if you're online and try again\ud83d\ude4f"),
        (0, react_web_1.createPlasmicElementProxy)(p.Stack, { as: "form", "data-plasmic-name": "newsletterForm", "data-plasmic-override": overrides.newsletterForm, hasGap: true, className: (0, react_web_1.classNames)(plasmic_pro_pro_module_css_1.default.all, PlasmicNewsletterForm_module_css_1.default.newsletterForm, {
                [PlasmicNewsletterForm_module_css_1.default.newsletterFormstage_afterSubmit]: (0, react_web_1.hasVariant)($state, "stage", "afterSubmit")
            }), id: "newsletter-form" },
            (() => {
                const child$Props = {
                    className: (0, react_web_1.classNames)("__wab_instance", PlasmicNewsletterForm_module_css_1.default.emailInput),
                    onChange: p.generateStateOnChangePropForCodeComponents($state, "value", ["emailInput", "value"], registerInput_2.inputHelpers),
                    placeholder: "abc@xyz.com",
                    type: "email",
                    value: p.generateStateValueProp($state, ["emailInput", "value"])
                };
                p.initializeCodeComponentStates($state, [
                    {
                        name: "value",
                        plasmicStateName: "emailInput.value"
                    }
                ], [], registerInput_2.inputHelpers !== null && registerInput_2.inputHelpers !== void 0 ? registerInput_2.inputHelpers : {}, child$Props);
                return ((0, react_web_1.createPlasmicElementProxy)(registerInput_1.AntdInput, Object.assign({ "data-plasmic-name": "emailInput", "data-plasmic-override": overrides.emailInput }, child$Props)));
            })(),
            (0, react_web_1.createPlasmicElementProxy)("button", { "data-plasmic-name": "submitButton", "data-plasmic-override": overrides.submitButton, className: (0, react_web_1.classNames)(plasmic_pro_pro_module_css_1.default.all, plasmic_pro_pro_module_css_1.default.button, PlasmicNewsletterForm_module_css_1.default.submitButton), onClick: args.sendNewsLetter, ref: ref => {
                    $refs["submitButton"] = ref;
                } },
                (0, react_web_1.createPlasmicElementProxy)("div", { className: (0, react_web_1.classNames)(plasmic_pro_pro_module_css_1.default.all, plasmic_pro_pro_module_css_1.default.__wab_text, PlasmicNewsletterForm_module_css_1.default.text__jI6Cc), id: `` }, "\ud83d\udce8  Newsletter"))),
        (0, react_web_1.createPlasmicElementProxy)("div", { "data-plasmic-name": "submitMessageContainer", "data-plasmic-override": overrides.submitMessageContainer, className: (0, react_web_1.classNames)(plasmic_pro_pro_module_css_1.default.all, PlasmicNewsletterForm_module_css_1.default.submitMessageContainer, {
                [PlasmicNewsletterForm_module_css_1.default.submitMessageContainerstage_afterSubmit]: (0, react_web_1.hasVariant)($state, "stage", "afterSubmit")
            }) },
            (0, react_web_1.createPlasmicElementProxy)("div", { "data-plasmic-name": "submitMessage", "data-plasmic-override": overrides.submitMessage, className: (0, react_web_1.classNames)(plasmic_pro_pro_module_css_1.default.all, plasmic_pro_pro_module_css_1.default.__wab_text, PlasmicNewsletterForm_module_css_1.default.submitMessage, {
                    [PlasmicNewsletterForm_module_css_1.default.submitMessagestage_afterSubmit]: (0, react_web_1.hasVariant)($state, "stage", "afterSubmit")
                }) }, "Thank you \ud83e\udd73  We sent you an email with a confirmation button \ud83d\udcec"),
            (0, react_web_1.createPlasmicElementProxy)(registerButton_1.AntdButton, { "data-plasmic-name": "button", "data-plasmic-override": overrides.button, className: (0, react_web_1.classNames)("__wab_instance", PlasmicNewsletterForm_module_css_1.default.button, {
                    [PlasmicNewsletterForm_module_css_1.default.buttonstage_afterSubmit]: (0, react_web_1.hasVariant)($state, "stage", "afterSubmit")
                }) },
                (0, react_web_1.createPlasmicElementProxy)("div", { className: (0, react_web_1.classNames)(plasmic_pro_pro_module_css_1.default.all, plasmic_pro_pro_module_css_1.default.__wab_text, PlasmicNewsletterForm_module_css_1.default.text__taovo) }, "Button")))));
}
const PlasmicDescendants = {
    container: [
        "container",
        "newsletterForm",
        "emailInput",
        "submitButton",
        "submitMessageContainer",
        "submitMessage",
        "button"
    ],
    newsletterForm: ["newsletterForm", "emailInput", "submitButton"],
    emailInput: ["emailInput"],
    submitButton: ["submitButton"],
    submitMessageContainer: ["submitMessageContainer", "submitMessage", "button"],
    submitMessage: ["submitMessage"],
    button: ["button"]
};
function makeNodeComponent(nodeName) {
    const func = function (props) {
        const { variants, args, overrides } = React.useMemo(() => (0, react_web_1.deriveRenderOpts)(props, {
            name: nodeName,
            descendantNames: PlasmicDescendants[nodeName],
            internalArgPropNames: exports.PlasmicNewsletterForm__ArgProps,
            internalVariantPropNames: exports.PlasmicNewsletterForm__VariantProps
        }), [props, nodeName]);
        return PlasmicNewsletterForm__RenderFunc({
            variants,
            args,
            overrides,
            forNode: nodeName
        });
    };
    if (nodeName === "container") {
        func.displayName = "PlasmicNewsletterForm";
    }
    else {
        func.displayName = `PlasmicNewsletterForm.${nodeName}`;
    }
    return func;
}
exports.PlasmicNewsletterForm = Object.assign(
// Top-level PlasmicNewsletterForm renders the root element
makeNodeComponent("container"), {
    // Helper components rendering sub-elements
    newsletterForm: makeNodeComponent("newsletterForm"),
    emailInput: makeNodeComponent("emailInput"),
    submitButton: makeNodeComponent("submitButton"),
    submitMessageContainer: makeNodeComponent("submitMessageContainer"),
    submitMessage: makeNodeComponent("submitMessage"),
    button: makeNodeComponent("button"),
    // Metadata about props expected for PlasmicNewsletterForm
    internalVariantProps: exports.PlasmicNewsletterForm__VariantProps,
    internalArgProps: exports.PlasmicNewsletterForm__ArgProps
});
exports.default = exports.PlasmicNewsletterForm;
/* prettier-ignore-end */
